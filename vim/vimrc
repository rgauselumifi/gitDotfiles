filetype plugin on
runtime macros/matchit.vim
packadd! editorconfig

"options
set path=.,,,src/**,packages/**,apps/**
set wildignore+=*/node_modules/*,*/dist/*
set wildignorecase
set wildmenu
set laststatus=0
set ruler
set nonu
set showcmd
set cmdheight=1
set splitright
set splitbelow
set belloff=all
set wildchar=<C-n>
set termguicolors
set nobackup
set nowritebackup
set updatetime=300
set encoding=utf-8
set undodir=~/.vim/undo
set undofile
set noswapfile
set autoindent
set smartindent
set tabstop=2
set softtabstop=2
set signcolumn=no
set shiftwidth=2
set expandtab
set incsearch
set hlsearch
set ignorecase
set smartcase
set nowrap
set hidden
set grepprg=rg\ --vimgrep\ --smart-case
set grepformat^=%f:%l:%c:%m
set autoread
set timeoutlen=1000
set ttimeoutlen=100
set backspace=indent,eol,start
augroup Wrap
    autocmd!
    autocmd FileType qf,markdown setlocal wrap
augroup END


let mapleader = " "

"plugins
call plug#begin()
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'ojroques/vim-oscyank', {'branch': 'main'}
Plug 'suy/vim-context-commentstring'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'github/copilot.vim'
Plug 'romainl/vim-cool'
Plug 'ericbn/vim-solarized'
Plug 'sainnhe/sonokai'
Plug 'tomasiser/vim-code-dark'
call plug#end()

"Coc
let g:coc_global_extensions = ['coc-html', 'coc-json', 'coc-tsserver']
inoremap <silent><expr> <C-n>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ coc#refresh()

nnoremap <silent> K :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('definitionHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction
nmap ,n <Plug>(coc-rename)
nmap ,r <Plug>(coc-references)
 nmap ,a  <Plug>(coc-codeaction-cursor)
 nmap ,A  <Plug>(coc-codeaction-source)
 nmap <leader>d :CocDiagnostics<CR><C-w>k

 "copilot
 imap <C-L> <Plug>(copilot-accept-word)

 "maps
 nnoremap <leader>w :set wrap!<cr>
 nnoremap <leader>p :set paste!<cr>
 nnoremap <silent><nowait><expr> <C-d> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-d>zz"
 nnoremap <silent><nowait><expr> <C-u> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-u>zz"
 nnoremap <c-]> <c-]>zz
 nnoremap <c-t> <c-t>zz
 inoremap jk <esc>
 nnoremap <leader>s :Explore<cr>
 nnoremap <leader>b :b 
 nnoremap ,b :ls<cr>:b 
 nnoremap <leader>f :find 
 nnoremap <leader>g :grep 
 nnoremap <leader>z :e $MYVIMRC<cr>
 nnoremap <leader>Z :so $MYVIMRC<cr>
 nnoremap <leader>N :vnew \| setlocal nobuflisted buftype=nofile bufhidden=wipe noswapfile<cr>
 nnoremap <c-k> :cp<CR>
 nnoremap <c-j> :cn<CR>
 nnoremap [a :prev<cr>
 nnoremap ]a :n<cr>
 nnoremap [A :first<cr>
 nnoremap ]A :last<cr>
 nnoremap ]b :bnext<cr>
 nnoremap [b :bprevious<cr>
 nnoremap <bs> <c-^>
 nnoremap <c-p> :lprevious<CR>
 nnoremap <c-n> :lnext<CR>
 nnoremap <leader>c :cw<cr>
function! CloseLocationLists()
  windo if &buftype == 'quickfix' || &buftype == 'locationlist'
  \ | execute 'lclose'
  \ | endif
endfunction

nnoremap <leader>l :lclose<cr>
nnoremap <leader>L :call CloseLocationLists()<cr>

 nnoremap ,f mmgggqG`m
 nnoremap ' `
 nnoremap <leader>/ :g//#<left><left>

 vnoremap J :m '>+1<cr>gv=gv
 vnoremap K :m '<-2<cr>gv=gv

 inoremap {<cr> {<cr>}<esc>O
 inoremap [<cr> [<cr>]<esc>O
 inoremap (<cr> (<cr>)<esc>O
 inoremap {, {<cr>},<esc>O
 inoremap [, [<cr>],<esc>O
 inoremap (, (<cr>),<esc>O
 inoremap {; {<cr>};<esc>O
 inoremap [; [<cr>];<esc>O
 inoremap (; (<cr>);<esc>O

 nmap <leader>Y <Plug>OSCYankOperator
 nmap <leader>yy <leader>Y_
 vmap <leader>y <Plug>OSCYankVisual

"colors
 set tagfunc=CocTagFunc
 set background=dark
 colorscheme codedark
